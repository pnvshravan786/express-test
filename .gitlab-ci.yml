stages:
  - test
  - build
  - push

# default:
#   tags:
#     - shell (on host)

test-local:
  stage: test
  image: node:20-alpine
  script:
    - echo "Installing dependencies..."
    - npm install
    - echo "Installing curl..."
    - apk add --no-cache curl  # ✅ FIX: Install curl
    - echo "Starting Express server..."
    - nohup node src/index.js &  # Running from 'src' folder
    - sleep 5  # Wait for the server to start
    - echo "Testing local server with cURL..."
    - |
      STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
      if [ "$STATUS_CODE" -ne 200 ]; then
        echo "Local server test failed with status code $STATUS_CODE"
        exit 1
      fi
    - echo "Local server test passed!"

docker-build-test:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Building Docker image..."
    - docker build -t pnvshravan/myexpressapp:latest .

    - echo "Running Docker container..."
    - docker run -d --name test-container --network=host pnvshravan/myexpressapp:latest

    - sleep 5  # Wait for the container to start
    - echo "Installing curl..."
    - apk add --no-cache curl  # ✅ Install curl inside build stage

    - echo "Checking running containers..."
    - docker ps -a  # ✅ Debugging step
    - echo "Showing container logs..."
    - docker logs test-container  # ✅ Debugging step

    - echo "Testing server from inside the container..."
    - |
      STATUS_CODE=$(docker exec test-container curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
      if [ "$STATUS_CODE" -ne 200 ]; then
        echo "Docker container test failed with status code $STATUS_CODE"
        exit 1
      fi
    - echo "Docker container test passed!"

    - echo "Stopping and removing test container..."
    - docker stop test-container
    - docker rm test-container

    - echo "Saving Docker image as tar file..."
    - docker save -o myexpressapp.tar pnvshravan/myexpressapp:latest

    - echo "Uploading image to GitLab cache..."
    - mv myexpressapp.tar $CI_PROJECT_DIR/
  artifacts:
    paths:
      - myexpressapp.tar
    expire_in: 1 hour

push-to-registry:
  stage: push
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - docker-build-test
  script:
    - echo "Logging in to Docker Registry..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"

    - echo "Loading saved Docker image..."
    - docker load -i myexpressapp.tar

    - echo "Tagging and pushing Docker image..."
    - docker tag pnvshravan/myexpressapp:latest "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:latest"
  only:
    - main
